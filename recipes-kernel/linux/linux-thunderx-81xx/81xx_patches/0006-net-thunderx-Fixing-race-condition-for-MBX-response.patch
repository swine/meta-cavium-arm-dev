From 705bdea6c2d2f2e7698944255c9b54c8a2aa83ad Mon Sep 17 00:00:00 2001
From: Radoslaw Biernacki <rad@semihalf.com>
Date: Thu, 21 Apr 2016 12:55:16 +0530
Subject: [PATCH 06/23] net: thunderx: Fixing race condition for MBX response

Nic mailbox uses the same memory for request and responses.
Two msg: NIC_MBOX_MSG_RSS_SIZE & NIC_MBOX_MSG_ALLOC_SQS uses the same msg code
for request and response. Therefore the dataplane applications which usually use
polling for msg reception, cannot differentiate responses from its own request.

Fix removes the race condition while polling by utilizing different msg response
code created by conjunction of request code and MSB set to 1. Therefore VF app
will see different msg code for response and which makes strict condition for
msg reception acceptance.

The invalid (0x00) msg was added for marking proper msg code range. It cannot
be used for communication because mbx is cleared with 0x00 bytes.

Signed-off-by: Radoslaw Biernacki <rad@semihalf.com>
Signed-off-by: Sunil Goutham <sgoutham@cavium.com>
---
 drivers/net/ethernet/cavium/thunder/nic.h        | 11 ++++++++---
 drivers/net/ethernet/cavium/thunder/nic_main.c   |  7 ++++---
 drivers/net/ethernet/cavium/thunder/nicvf_main.c |  4 ++--
 3 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/cavium/thunder/nic.h b/drivers/net/ethernet/cavium/thunder/nic.h
index b63278a..60d4a7e 100644
--- a/drivers/net/ethernet/cavium/thunder/nic.h
+++ b/drivers/net/ethernet/cavium/thunder/nic.h
@@ -345,7 +345,11 @@ struct nicvf {
 #define	NIC_PF_VF_MAILBOX_SIZE		2
 #define	NIC_MBOX_MSG_TIMEOUT		2000 /* ms */
 
-/* Mailbox message types */
+/* Mailbox message types
+ * Message codes must be in the range of 0x01 to 0x7F
+ * MSB (0x80) is used for marking response message in case it is not ACK/NACK
+ */
+#define	NIC_MBOX_MSG_INVALID		0x00	/* Do not use - Invalid msg */
 #define	NIC_MBOX_MSG_READY		0x01	/* Is PF ready to rcv msgs */
 #define	NIC_MBOX_MSG_ACK		0x02	/* ACK the message received */
 #define	NIC_MBOX_MSG_NACK		0x03	/* NACK the message received */
@@ -369,8 +373,9 @@ struct nicvf {
 #define	NIC_MBOX_MSG_SNICVF_PTR		0x15	/* Send sqet nicvf ptr to PVF */
 #define	NIC_MBOX_MSG_LOOPBACK		0x16	/* Set interface in loopback */
 #define	NIC_MBOX_MSG_RESET_STAT_COUNTER 0x17	/* Reset statistics counters */
-#define	NIC_MBOX_MSG_CFG_DONE		0xF0	/* VF configuration done */
-#define	NIC_MBOX_MSG_SHUTDOWN		0xF1	/* VF is being shutdown */
+#define	NIC_MBOX_MSG_CFG_DONE		0x7E	/* VF configuration done */
+#define	NIC_MBOX_MSG_SHUTDOWN		0x7F	/* VF is being shutdown */
+#define	NIC_MBOX_MSG_RES_BIT		0x80	/* Mark for response message */
 
 struct nic_cfg_msg {
 	u8    msg;
diff --git a/drivers/net/ethernet/cavium/thunder/nic_main.c b/drivers/net/ethernet/cavium/thunder/nic_main.c
index 6c99257..26c7c68 100644
--- a/drivers/net/ethernet/cavium/thunder/nic_main.c
+++ b/drivers/net/ethernet/cavium/thunder/nic_main.c
@@ -434,7 +434,7 @@ static void nic_send_rss_size(struct nicpf *nic, int vf)
 
 	msg = (u64 *)&mbx;
 
-	mbx.rss_size.msg = NIC_MBOX_MSG_RSS_SIZE;
+	mbx.rss_size.msg = NIC_MBOX_MSG_RSS_SIZE | NIC_MBOX_MSG_RES_BIT;
 	mbx.rss_size.ind_tbl_size = nic->rss_ind_tbl_size;
 	nic_send_msg_to_vf(nic, vf, &mbx);
 }
@@ -722,8 +722,9 @@ static void nic_alloc_sqs(struct nicpf *nic, u8 pvf, struct sqs_alloc *sqs)
 	}
 
 send_mbox:
-	mbx.sqs_alloc.msg = NIC_MBOX_MSG_ALLOC_SQS;
-	mbx.sqs_alloc.qs_count = alloc_qs;
+	mbx.sqs_alloc.msg = NIC_MBOX_MSG_ALLOC_SQS | NIC_MBOX_MSG_RES_BIT;
+	mbx.sqs_alloc.spec = sqs->spec;
+	mbx.sqs_alloc.qs_count = alloc_qs; /* 0 for failure (NACK) */
 	nic_send_msg_to_vf(nic, pvf, &mbx);
 }
 
diff --git a/drivers/net/ethernet/cavium/thunder/nicvf_main.c b/drivers/net/ethernet/cavium/thunder/nicvf_main.c
index 12ea73a..63c2252 100644
--- a/drivers/net/ethernet/cavium/thunder/nicvf_main.c
+++ b/drivers/net/ethernet/cavium/thunder/nicvf_main.c
@@ -217,7 +217,7 @@ static void  nicvf_handle_mbx_intr(struct nicvf *nic)
 	case NIC_MBOX_MSG_NACK:
 		nic->pf_nacked = true;
 		break;
-	case NIC_MBOX_MSG_RSS_SIZE:
+	case NIC_MBOX_MSG_RSS_SIZE | NIC_MBOX_MSG_RES_BIT:
 		nic->rss_info.rss_size = mbx.rss_size.ind_tbl_size;
 		nic->pf_acked = true;
 		break;
@@ -244,7 +244,7 @@ static void  nicvf_handle_mbx_intr(struct nicvf *nic)
 			netif_tx_stop_all_queues(nic->netdev);
 		}
 		break;
-	case NIC_MBOX_MSG_ALLOC_SQS:
+	case NIC_MBOX_MSG_ALLOC_SQS | NIC_MBOX_MSG_RES_BIT:
 		nic->sqs_count = mbx.sqs_alloc.qs_count;
 		nic->pf_acked = true;
 		break;
-- 
2.1.4

