From 5b6f162595c0a2db976bfa3b8872ecb084197436 Mon Sep 17 00:00:00 2001
From: John Johansen <john.johansen@canonical.com>
Date: Fri, 18 Mar 2016 06:06:16 -0700
Subject: [PATCH 1630/1767] Revert "UBUNTU: SAUCE: apparmor: fix sleep from
 invalid context"

BugLink: http://bugs.launchpad.net/bugs/1379535

This reverts commit f970350049bdb24c3b3bdf4ef8c162833c4f2dd8.

Signed-off-by: Tim Gardner <tim.gardner@canonical.com>
---
 security/apparmor/mount.c | 47 +++++++++++++++++++++++------------------------
 1 file changed, 23 insertions(+), 24 deletions(-)

diff --git a/security/apparmor/mount.c b/security/apparmor/mount.c
index 8c81157..b2d3354 100644
--- a/security/apparmor/mount.c
+++ b/security/apparmor/mount.c
@@ -381,16 +381,16 @@ int aa_bind_mount(struct aa_label *label, struct path *path,
 
 	flags &= MS_REC | MS_BIND;
 
-	error = kern_path(dev_name, LOOKUP_FOLLOW|LOOKUP_AUTOMOUNT, &old_path);
-	if (error)
-		goto error;
-
 	get_buffers(buffer, old_buffer);
 	error = aa_path_name(path, path_flags(labels_profile(label), path), buffer, &name,
 			     &info, labels_profile(label)->disconnected);
 	if (error)
 		goto error;
 
+	error = kern_path(dev_name, LOOKUP_FOLLOW|LOOKUP_AUTOMOUNT, &old_path);
+	if (error)
+		goto error;
+
 	error = aa_path_name(&old_path, path_flags(labels_profile(label),
 						   &old_path),
 			     old_buffer, &old_name, &info,
@@ -463,10 +463,6 @@ int aa_move_mount(struct aa_label *label, struct path *path,
 	if (!orig_name || !*orig_name)
 		return -EINVAL;
 
-	error = kern_path(orig_name, LOOKUP_FOLLOW, &old_path);
-	if (error)
-		goto error;
-
 	get_buffers(buffer, old_buffer);
 	error = aa_path_name(path, path_flags(labels_profile(label), path),
 			     buffer, &name, &info,
@@ -474,6 +470,10 @@ int aa_move_mount(struct aa_label *label, struct path *path,
 	if (error)
 		goto error;
 
+	error = kern_path(orig_name, LOOKUP_FOLLOW, &old_path);
+	if (error)
+		goto error;
+
 	error = aa_path_name(&old_path, path_flags(labels_profile(label),
 						   &old_path),
 			     old_buffer, &old_name, &info,
@@ -508,20 +508,22 @@ int aa_new_mount(struct aa_label *label, const char *orig_dev_name,
 	const char *name = NULL, *dev_name = NULL, *info = NULL;
 	bool binary = true;
 	int error;
-	int requires_dev;
-	struct file_system_type *fstype;
-	struct path dev_path;
 
 	dev_name = orig_dev_name;
+	get_buffers(buffer, dev_buffer);
 	if (type) {
-		fstype = get_fs_type(type);
+		int requires_dev;
+		struct file_system_type *fstype = get_fs_type(type);
 		if (!fstype)
 			return -ENODEV;
+
 		binary = fstype->fs_flags & FS_BINARY_MOUNTDATA;
 		requires_dev = fstype->fs_flags & FS_REQUIRES_DEV;
 		put_filesystem(fstype);
 
 		if (requires_dev) {
+			struct path dev_path;
+
 			if (!dev_name || !*dev_name) {
 				error = -ENOENT;
 				goto out;
@@ -530,19 +532,16 @@ int aa_new_mount(struct aa_label *label, const char *orig_dev_name,
 			error = kern_path(dev_name, LOOKUP_FOLLOW, &dev_path);
 			if (error)
 				goto error;
-		}
-	}
 
-	get_buffers(buffer, dev_buffer);
-	if (type) {
-		error = aa_path_name(&dev_path,
-				     path_flags(labels_profile(label),
-						&dev_path),
-				     dev_buffer, &dev_name, &info,
-				     labels_profile(label)->disconnected);
-		path_put(&dev_path);
-		if (error)
-			goto error;
+			error = aa_path_name(&dev_path,
+					     path_flags(labels_profile(label),
+							&dev_path),
+					     dev_buffer, &dev_name, &info,
+					     labels_profile(label)->disconnected);
+			path_put(&dev_path);
+			if (error)
+				goto error;
+		}
 	}
 
 	error = aa_path_name(path, path_flags(labels_profile(label), path),
-- 
1.9.3

