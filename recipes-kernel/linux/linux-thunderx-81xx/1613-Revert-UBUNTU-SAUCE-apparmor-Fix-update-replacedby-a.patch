From fc5df7aa1101fa11abe91d205d814795d83857e9 Mon Sep 17 00:00:00 2001
From: John Johansen <john.johansen@canonical.com>
Date: Fri, 18 Mar 2016 06:05:41 -0700
Subject: [PATCH 1613/1767] Revert "UBUNTU: SAUCE: apparmor: Fix: update
 replacedby allocation to take a gfp parameter"

BugLink: http://bugs.launchpad.net/bugs/1379535

This reverts commit 7e0977f6bb9ce90dcd316a3bf4c43546aac9f444.

Signed-off-by: Tim Gardner <tim.gardner@canonical.com>
---
 security/apparmor/include/label.h | 2 +-
 security/apparmor/label.c         | 8 ++++----
 security/apparmor/policy.c        | 8 ++++----
 3 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/security/apparmor/include/label.h b/security/apparmor/include/label.h
index 194ffe5..d7f50a2 100644
--- a/security/apparmor/include/label.h
+++ b/security/apparmor/include/label.h
@@ -405,7 +405,7 @@ static inline void aa_put_label(struct aa_label *l)
 }
 
 
-struct aa_replacedby *aa_alloc_replacedby(struct aa_label *l, gfp_t gfp);
+struct aa_replacedby *aa_alloc_replacedby(struct aa_label *l);
 void aa_free_replacedby_kref(struct kref *kref);
 
 static inline struct aa_replacedby *aa_get_replacedby(struct aa_replacedby *r)
diff --git a/security/apparmor/label.c b/security/apparmor/label.c
index 02742b2..931edef 100644
--- a/security/apparmor/label.c
+++ b/security/apparmor/label.c
@@ -59,11 +59,11 @@ void aa_free_replacedby_kref(struct kref *kref)
 	free_replacedby(r);
 }
 
-struct aa_replacedby *aa_alloc_replacedby(struct aa_label *l, gfp_t gfp)
+struct aa_replacedby *aa_alloc_replacedby(struct aa_label *l)
 {
 	struct aa_replacedby *r;
 
-	r = kzalloc(sizeof(struct aa_replacedby), gfp);
+	r = kzalloc(sizeof(struct aa_replacedby), GFP_KERNEL);
 	if (r) {
 		kref_init(&r->count);
 		rcu_assign_pointer(r->label, aa_get_label(l));
@@ -1134,7 +1134,7 @@ struct aa_label *aa_label_merge(struct aa_label *a, struct aa_label *b,
 		new = aa_label_alloc(a->size + b->size, gfp);
 		if (!new)
 			goto out;
-		r = aa_alloc_replacedby(new, gfp);
+		r = aa_alloc_replacedby(new);
 		if (!r) {
 			aa_label_free(new);
 			goto out;
@@ -1814,7 +1814,7 @@ static struct aa_label *__label_update(struct aa_label *label)
 		return NULL;
 
 	if (!label->replacedby) {
-		struct aa_replacedby *r = aa_alloc_replacedby(l, GFP_KERNEL);
+		struct aa_replacedby *r = aa_alloc_replacedby(l);
 		if (!r) {
 			aa_put_label(l);
 			return NULL;
diff --git a/security/apparmor/policy.c b/security/apparmor/policy.c
index c5d4a60..9165cd2 100644
--- a/security/apparmor/policy.c
+++ b/security/apparmor/policy.c
@@ -300,7 +300,7 @@ static struct aa_namespace *alloc_namespace(const char *prefix,
 	ns->unconfined = aa_alloc_profile("unconfined");
 	if (!ns->unconfined)
 		goto fail_unconfined;
-	ns->unconfined->label.replacedby = aa_alloc_replacedby(NULL, GFP_KERNEL);
+	ns->unconfined->label.replacedby = aa_alloc_replacedby(NULL);
 	if (!ns->unconfined->label.replacedby)
 		goto fail_replacedby;
 
@@ -716,7 +716,7 @@ struct aa_profile *aa_new_null_profile(struct aa_profile *parent, int hat)
 	if (!profile)
 		goto fail;
 
-	profile->label.replacedby = aa_alloc_replacedby(NULL, GFP_KERNEL);
+	profile->label.replacedby = aa_alloc_replacedby(NULL);
 	if (!profile->label.replacedby)
 		goto fail;
 
@@ -757,7 +757,7 @@ struct aa_label *aa_setup_default_label(void)
 	profile->ns = aa_get_namespace(root_ns);
 
 	/* replacedby being set needed by fs interface */
-	profile->label.replacedby = aa_alloc_replacedby(&profile->label, GFP_KERNEL);
+	profile->label.replacedby = aa_alloc_replacedby(&profile->label);
 	if (!profile->label.replacedby) {
 		aa_free_profile(profile);
 		return NULL;
@@ -1232,7 +1232,7 @@ ssize_t aa_replace_profiles(void *udata, size_t size, bool noreplace)
 
 	/* create new fs entries for introspection if needed */
 	list_for_each_entry(ent, &lh, list) {
-		struct aa_replacedby *r = aa_alloc_replacedby(&ent->new->label, GFP_KERNEL);
+		struct aa_replacedby *r = aa_alloc_replacedby(&ent->new->label);
 		if (!r) {
 			info = "failed to create";
 			error = -ENOMEM;
-- 
1.9.3

