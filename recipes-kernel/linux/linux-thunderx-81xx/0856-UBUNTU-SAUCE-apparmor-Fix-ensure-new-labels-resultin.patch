From ce203c3911dae8dccee20871b3b2279151198585 Mon Sep 17 00:00:00 2001
From: John Johansen <john.johansen@canonical.com>
Date: Sun, 4 Oct 2015 15:51:45 -0700
Subject: [PATCH 0856/1767] UBUNTU: SAUCE: apparmor: Fix: ensure new labels
 resulting from merge have a replacedby

BugLink: http://bugs.launchpad.net/bugs/1448912

Basic profile labels always have a replacedby allocated and set but
the code used to create labels from merges without a replacedby and
let label_update allocate and set those labels replacedby structs.

While the label_merge fix addressed the race between label_merge and
label_update, it still left a bug where labels from merges race
label_update so that they remain permanently stale, because they
don't have proper replacedby information that should be updated during
their replacement.

Specifically a label from a merge will not have a replacedby if it has
never been through a label_update cycle, and the direct replacement
from the label_merge fix is NOT updating the replacedby to avoid doing
allocations under lock. This results in the old label being permanently
diconnected and its references never updating correctly.

To fix this create all labels that result from a merge with a replacedby.
This results in all labels inserted into the labelset having valid
replacedby structs. In the case that the insertion of a label results
in a replacement due to it creating an updated version of the label,
the old labels replacedby will be reused and the new one can be freed.

Signed-off-by: John Johansen <john.johansen@canonical.com>
Signed-off-by: Tim Gardner <tim.gardner@canonical.com>
---
 security/apparmor/label.c | 28 +++++++++++++++++++++++-----
 1 file changed, 23 insertions(+), 5 deletions(-)

diff --git a/security/apparmor/label.c b/security/apparmor/label.c
index d011c14..218d856 100644
--- a/security/apparmor/label.c
+++ b/security/apparmor/label.c
@@ -652,7 +652,7 @@ struct aa_label *aa_label_find(struct aa_labelset *ls, struct aa_label *l)
  * @replace: whether this insertion should replace an existing entry if present
  * Requires: @ls->lock
  *           caller to hold a valid ref on l
- *
+ *           if @replace is true l has a preallocated replacedby associated
  * Returns: @l if successful in inserting @l - with additional refcount
  *          else ref counted equivalent label that is already in the set,
             the else condition only happens if @replace is false
@@ -676,9 +676,18 @@ static struct aa_label *__aa_label_insert(struct aa_labelset *ls,
 		parent = *new;
 		if (result == 0) {
 			labelsetstats_inc(ls, existing);
-			if (!replace && aa_get_label_not0(this))
-				return this;
-			/* *this is either queued for destruction or being replaced */
+			if (!replace) {
+				if (aa_get_label_not0(this))
+					return this;
+				/* queued for destruction, in place replace */
+			} else {
+				if (this->replacedby) {
+					free_replacedby(l->replacedby);
+					l->replacedby = aa_get_replacedby(this->replacedby);
+					__aa_update_replacedby(this, l);
+				} else
+					this->replacedby = aa_get_replacedby(l->replacedby);
+			}
 			AA_BUG(!__aa_label_replace(ls, this, l));
 			return aa_get_label(l);
 		} else if (result < 0)
@@ -901,6 +910,8 @@ static int aa_sort_and_merge_profiles(int n, struct aa_profile **ps)
  * @a: label to merge with @b  (NOT NULL)
  * @b: label to merge with @a  (NOT NULL)
  *
+ * Requires: preallocated replacedby
+ *
  * Returns: ref counted label either l if merge is unique
  *          a if b is a subset of a
  *          b if a is a subset of b
@@ -1090,6 +1101,7 @@ struct aa_label *aa_label_merge(struct aa_label *a, struct aa_label *b,
 
 	if (!label) {
 		struct aa_label *new;
+		struct aa_replacedby *r;
 
 		a = aa_get_newest_label(a);
 		b = aa_get_newest_label(b);
@@ -1100,7 +1112,13 @@ struct aa_label *aa_label_merge(struct aa_label *a, struct aa_label *b,
 		new = aa_label_alloc(a->size + b->size, gfp);
 		if (!new)
 			goto out;
-
+		r = aa_alloc_replacedby(new);
+		if (!r) {
+			aa_label_free(new);
+			goto out;
+		}
+		/* only label update will set replacedby so ns lock is enough */
+		new->replacedby = r;
 		write_lock_irqsave(&ls->lock, flags);
 		label = __label_merge_insert(ls, new, a, b);
 		write_unlock_irqrestore(&ls->lock, flags);
-- 
1.9.3

